-----------------------------------------------	SCRIPT LIBRARY: TEXT HANDLING----------------------------------------------- HANDLER: Remove trailing and/or leading characters from stringson trim_line(this_text, trim_chars, trim_indicator)	-- 0 = beginning, 1 = end, 2 = both	set x to the length of the trim_chars	-- TRIM BEGINNING	if the trim_indicator is in {0, 2} then		repeat while this_text begins with the trim_chars			try				set this_text to characters (x + 1) thru -1 of this_text as string			on error				-- the text contains nothing but the trim characters				return ""			end try		end repeat	end if	-- TRIM ENDING	if the trim_indicator is in {1, 2} then		repeat while this_text ends with the trim_chars			try				set this_text to characters 1 thru -(x + 1) of this_text as string			on error				-- the text contains nothing but the trim characters				return ""			end try		end repeat	end if	return this_textend trim_line-- HANDLER: trims unwanted characters from multiple lines--    Requires trim_line sub-routineon trim_paragraphs(this_text, trim_chars, trim_indicator)	set the paragraph_list to every paragraph of this_text	repeat with i from 1 to the count of paragraphs of this_text		set this_paragraph to item i of the paragraph_list		set item i of the paragraph_list to trim_line(this_paragraph, trim_chars, trim_indicator)	end repeat	set AppleScript's text item delimiters to return	set this_text to the paragraph_list as string	set AppleScript's text item delimiters to ""	return this_textend trim_paragraphs-- HANDLER: Strips leading and trailing occurences of supplied characterto stripChar of char from someText	set tid to AppleScript's text item delimiters	set charToRemove to char	set AppleScript's text item delimiters to charToRemove	set TextItems to someText's text items		set a to 1	set b to (count TextItems)		--Determine the first item that is not charToRemove	repeat while (a < b) and ((count item a of TextItems) is 0)		set a to a + 1	end repeat		--Determine last item that is not charToRemove	repeat while (b > a) and ((count item b of TextItems) is 0)		set b to b - 1	end repeat		--Strip leading and trailing charToRemove items	set strippedText to text from text item a to text item b of someText	set AppleScript's text item delimiters to tid	strippedTextend stripChar-- HANDLER: Converts string to all upper or lower case--    this_case of 0 yields lower case, 1 upper caseon change_case(this_text, this_case)	if this_case is 0 then		set the comparison_string to "ABCDEFGHIJKLMNOPQRSTUVWXYZ"		set the source_string to "abcdefghijklmnopqrstuvwxyz"	else		set the comparison_string to "abcdefghijklmnopqrstuvwxyz"		set the source_string to "ABCDEFGHIJKLMNOPQRSTUVWXYZ"	end if	set the new_text to ""	repeat with this_char in this_text		set x to the offset of this_char in the comparison_string		if x is not 0 then			set the new_text to (the new_text & character x of the source_string) as string		else			set the new_text to (the new_text & this_char) as string		end if	end repeat	return the new_textend change_case-- HANDLER: Substitutes characters within text stringon replace_chars(this_text, search_string, replacement_string)	set AppleScript's text item delimiters to the search_string	set the item_list to every text item of this_text	set AppleScript's text item delimiters to the replacement_string	set this_text to the item_list as string	set AppleScript's text item delimiters to ""	return this_textend replace_chars-- HANDLER: Splits string into array by delimiterto split(someText, delimiter)	set AppleScript's text item delimiters to delimiter	set someText to someText's text items	set AppleScript's text item delimiters to {""}	return someTextend split-- HANDLER: Returns patterncounton patternCount(theText, matchString)	set oldTID to AppleScript's text item delimiters	set AppleScript's text item delimiters to {matchString}	set countedPattern to count of text items of theText	set AppleScript's text item delimiters to oldTID	return countedPattern - 1end PatternCount-- HANDLER: Searches and replaces string within text block--	Accepts lists in searchString and replaceStringto searchReplaceText(theText, searchString, replaceString)	set searchString to searchString as list	set replaceString to replaceString as list	set theText to theText as text		set oldTID to AppleScript's text item delimiters	repeat with i from 1 to count searchString		set AppleScript's text item delimiters to searchString's item i		set theText to theText's text items		set AppleScript's text item delimiters to replaceString's item i		set theText to theText as text	end repeat	set AppleScript's text item delimiters to oldTID		return theTextend searchReplaceText-- HANDLER: Removes everything but integers from stringon stripToInteger(someText)	set myResult to {}	set textItems to text items of (someText as string)	repeat with i in textItems		try			set end of myResult to (i as integer)		end try	end repeat	myResult as stringend stripToInteger-- HANDLER: Returns list as return-delimited text stringto listToText(theList)	set theText to ""	repeat with i in theList		set myPath to POSIX path of (i as alias)		set theText to theText & myPath & return	end repeat	return theTextend listToText-- HANDLER: Converts record to stringto recordToString(theRecord)	try		theRecord as string	on error errMessage	end try	set recString to textBetween(errMessage, "{", "}")	return "{" & recString & "}"end recordToString-- HANDLER: Retrieves text between first occurrences of startString and endStringto textBetween(theText, startString, endString)	set oldTID to AppleScript's text item delimiters	set AppleScript's text item delimiters to startString	set theString to item 2 of text items of theText	set AppleScript's text item delimiters to endString	set theString to item 1 of text items of theString	set AppleScript's text item delimiters to oldTID	theStringend textBetween-- HANDLER: Returns offset of last occurrence of characteron lastOffset(theString, character)	set strRev to (reverse of characters of theString) as text	set s to (length of theString) - (offset of ":" in strRev) + 1end lastOffset-- HANDLER: Returns offset of last occurrence of character--	Source: http://www.alecjacobson.com/weblog/?p=49on lastOffset(theText, char)	try		set len to count of theText		set reversed to reverse of characters of theText as string		set last_occurrence to len - (offset of char in reversed) + 1		if last_occurrence > len then			return 0		end if	on error		return 0	end try	return last_occurrenceend lastOffset-- HANDLER: Returns list as text stringto join(theList, delimiter)	set TID to AppleScript's text item delimiters	set AppleScript's text item delimiters to delimiter	set theResult to theList as text	set AppleScript's text item delimiters to TID	return theResultend join-- HANDLER: Trims the provided string from the text's beginningon lstripString(theText, trimString)	 set x to count trimString	 try			repeat while theText begins with the trimString				 set theText to characters (x + 1) thru -1 of theText as text			end repeat	 on error			return ""	 end try	 return theTextend lstripString-- HANDLER: Trims the provided string from the text's endingon rstripString(theText, trimString)	 set x to count trimString	 try			repeat while theText ends with the trimString				 set theText to characters 1 thru -(x + 1) of theText as text			end repeat	 on error			return ""	 end try	 return theTextend rstripString-- HANDLER: Trims the provided string from the text's boundaries-- Note: Requires the lstripString and rstripString functionson stripString(theText, trimString)	 set theText to lstripString(theText, trimString)	 set theText to rstripString(theText, trimString)	 return theTextend stripString